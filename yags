#!/bin/env lua

local lfs =require("lfs")

local def_path = os.getenv("HOME") .. "/.config/nvim/pack"

local data_dir = os.getenv("HOME") .. "/.yags"

local directory_list ={}
local function update_repositories(dir_path)
	for filename in lfs.dir(dir_path) do
		if filename ~="." and filename ~= ".." then
			local full_path = dir_path .. "/" .. filename
			local attributes = lfs.attributes(full_path)
			if attributes and attributes.mode == "directory" then
				for reponame in lfs.dir(full_path .. "/start") do
					if reponame ~="." and reponame ~=".." then
						local full_repo = full_path .. "/start/" .. reponame
						
						local status_command=string.format("cd %s && git status -s",full_repo)
						local pull_command=string.format("cd %s && git pull -v",full_repo)
						
						local handleStatus = io.popen(status_command)
						
						local output = handleStatus:read("*a")
						local handleStatusExitStatus = handleStatus:close()
						
						if handleStatusExitStatus then
							print("checking " .. reponame)
						
							else
						
							print(reponame .. " status command error")
						end	


						if output ~= "" then
						
							local handlePull = io.popen(pull_command)
							local outputPull = handlePull:read("*a")
							
							print(outputPull)
							
							local exitStatusPull = handlePull:close()
						
							if exitStatusPull then
								print(reponame .. " Pull successful")
								else
								print(reponame .. " Pull failed")
							end
						else
							print(reponame .. " is up to date")
						end
			
					end
				end
			end
		end
	end
end



local function add_package(packageName,rootPath)
	local pos = string.find(packageName,"/")
	local file, err = io.open(data_dir .. "repos","w")
	if not file then
		error("Error opening file" .. err)
	end	


	if pos then
		local checkCommand = "gh repo view " .. packageName
		local checkHandle = io.popen(checkCommand)
		if checkHandle == nil then
			error("couldnt execute command")
		end
		local checkOutput = checkHandle:read("*a")
		local exitStatus = {checkHandle:close()}
		if exitStatus[3] == 0 then
			local packagePath =rootPath .. "/" .. packageName:sub(1,pos) .. "/start"
			local dirCommand = "mkdir -p " .. packagePath .. " && cd " .. packagePath
			local gitCommand ="git clone --depth 1 https://github.com/" .. packageName
			
			local handle = io.popen(dirCommand .. " && " .. gitCommand)
			if handle == nil then
				error("couldnt run dir command")
			end
			local output = handle:read("*a")
			print(output)
			local exitStatus = handle:close()
			if exitStatus then
				print("success")
			else
				print("fail")
			end
		else
			print(checkOutput)
			print("package Not found")
		end
	else
		print("malformed package name\npackage names should be in the form of {username}/{repository}")
	end
end


if (lfs.attributes(data_dir,"mode") ~= "directory") then
	local success, err = lfs.mkdir(data_dir)
	if success then
		print(".yags directory has been created in " .. os.getenv("HOME"))
	else 
		print("Error in creating .yags directory:", err)
	end
end


if arg[1] then
	if arg[1]:sub(1,1) == "-" then
		local operation= arg[1]:sub(2,2)
		if operation == "P" then
			update_repositories(def_path)
		elseif operation == "A" then
			if arg[2] then
				add_package(arg[2],def_path)
			else
				print("enter package to install in the form:\n{username}/{repository}")
			end
		else
			print("invalid option")
		end
	else
		print("please select opreation using -{operation}")
	end
else 
	print("options are -P for updating current repos")
end
